# 游戏开发工作流程指南

## 第一步：项目初始化
1. 在VSCode中发布项目到GitHub
   - 使用Source Control面板的"Publish to GitHub"
   - 选择public仓库
   - 包含所有现有文件

2. 验证初始提交
   - 确认README.md、LICENSE、.gitignore已包含
   - 检查所有源代码文件已提交
   - 确认项目可以正常运行

## 第二步：选择要开发的功能
1. 查看feature_roadmap.txt
2. 选择优先级最高的功能
3. 确定具体的改进目标

## 第三步：创建功能分支
1. 在VSCode中创建新分支：
   - 点击左下角分支名称
   - 选择"Create new branch..."
   - 使用规范的分支命名，如：
     * feature/improve-jump-mechanics
     * feature/add-sound-effects

2. 确认分支创建：
   - 检查左下角分支名称已更新
   - 确认Source Control面板显示新分支

## 第四步：开发新功能
1. 在新分支上进行开发：
   - 修改相关代码文件
   - 定期测试功能
   - 保持提交粒度合适

2. 提交更改：
   - Stage Changes（暂存更改）
   - 写清晰的提交信息
   - 定期推送到远程分支

3. 保持代码同步：
   - 定期从main分支拉取更新
   - 解决可能的冲突
   - 确保代码始终可运行

## 第五步：功能完成后
1. 完整测试：
   - 确保新功能正常工作
   - 验证没有引入新bug
   - 检查性能影响

2. 合并到主分支：
   - 切换到main分支
   - 选择"Merge branch..."
   - 选择功能分支进行合并
   - 解决可能的冲突
   - 推送到远程仓库

## 代码提交规范
使用清晰的提交信息：
```
feat: Add double jump ability
- Implement double jump mechanics
- Add jump counter
- Update jump animation
```

常用提交类型：
- feat: 新功能
- fix: 修复bug
- refactor: 代码重构
- style: 格式修改
- docs: 文档更新
- test: 测试用例
- chore: 构建过程或辅助工具的变动

## 开发注意事项
1. 代码组织
   - 保持代码模块化
   - 遵循现有的代码风格
   - 添加必要的注释

2. 性能考虑
   - 注意音频处理性能
   - 优化渲染效率
   - 控制内存使用

3. 用户体验
   - 保持操作响应流畅
   - 提供适当的视觉反馈
   - 确保游戏难度适中

## 调试技巧
1. 使用debug-utils.js进行调试：
   - 打印关键数据
   - 监控性能指标
   - 可视化碰撞检测

2. 使用浏览器开发工具：
   - 监控帧率
   - 检查内存使用
   - 分析音频处理

## 发布流程
1. 版本号更新
2. 更新README.md
3. 合并到main分支
4. 创建Release标签
5. 更新在线演示版本

## 问题解决
如果遇到问题：
1. 检查debug日志
2. 使用Git回退到稳定版本
3. 在功能分支上修复
4. 确认修复后再合并

记住：小步快跑，频繁提交，保持代码质量！
